// /api/create_incomplete_packages_table.js
import { createClient } from '@supabase/supabase-js';

// One-off endpoint to create the incomplete_packages table if it doesn't exist
export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).end();

  // Protect this endpoint
  if (req.body.secret !== 'Roneth113') return res.status(403).json({ error: 'Forbidden' });

  const supabase = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
  );

  const sql = `
    DO $$
    DECLARE
      loc_type text;
    BEGIN
      SELECT data_type INTO loc_type
      FROM information_schema.columns
      WHERE table_schema='public' AND table_name='locations' AND column_name='id';

      IF loc_type = 'uuid' THEN
        EXECUTE $$
          CREATE TABLE IF NOT EXISTS public.incomplete_packages (
            id bigint generated by default as identity primary key,
            location_id uuid not null references public.locations(id) on delete cascade,
            combo_id bigint references public.combos(id) on delete cascade,
            item_name text,
            quantity numeric not null default 0,
            notes text,
            created_at timestamptz not null default now()
          )
        $$;
      ELSE
        EXECUTE $$
          CREATE TABLE IF NOT EXISTS public.incomplete_packages (
            id bigint generated by default as identity primary key,
            location_id bigint not null references public.locations(id) on delete cascade,
            combo_id bigint references public.combos(id) on delete cascade,
            item_name text,
            quantity numeric not null default 0,
            notes text,
            created_at timestamptz not null default now()
          )
        $$;
      END IF;
    END$$;
    CREATE INDEX IF NOT EXISTS idx_incomplete_packages_location ON public.incomplete_packages(location_id);
    CREATE INDEX IF NOT EXISTS idx_incomplete_packages_combo ON public.incomplete_packages(combo_id);
  `;

  const { error } = await supabase.rpc('execute_sql', { sql });
  if (error) return res.status(500).json({ error: error.message });
  return res.status(200).json({ ok: true });
}
